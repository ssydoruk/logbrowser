package com.myutils.logbrowser.inquirer;

import Utils.ScreenInfo;
import Utils.UTCTimeRange;
import Utils.Util;
import com.jidesoft.dialog.ButtonPanel;
import com.jidesoft.dialog.JideOptionPane;
import com.jidesoft.dialog.StandardDialog;
import com.jidesoft.swing.JideTabbedPane;
import com.jidesoft.swing.TabEditingValidator;
import com.myutils.logbrowser.indexer.FileInfoType;
import com.myutils.logbrowser.inquirer.IDsFinder.RequestLevel;
import com.myutils.logbrowser.inquirer.IQueryResults.ProgressNotifications;
import com.myutils.logbrowser.inquirer.gui.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static Utils.ScreenInfo.fixOversizedWindow;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.OK_OPTION;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author ssydoruk
 */
public class QueryDialog extends javax.swing.JFrame {

    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger();
    private static QuerySetting _querySetting = null;
    /**
     * Creates new form QueryDialog
     */
    JideTabbedPane tabbedPane;
    ArrayList<IQueryResults> queries;
    ArrayList<IAggregateQuery> aggr = new ArrayList<>();
    AggregatesPanel aggrParams = null;
    RequestProgress rp = null;
    DoneFileDialog dfg = null;
    AggregateDialog aggregateDialog = null;
    CancelRunDialog fileSaveSettings = null;
    private int closeCause = 0;
    private final boolean aggregateInitiated = false;
    private FileOutSettings fileOutSetting;
    private JPanel aggregatePanel;
    private final ArrayList<ReportFrame> reps = new ArrayList<>();
    // Variables declaration - do not modify                     
    private javax.swing.JButton btAllCalls;
    private javax.swing.JButton btOK;
    //<editor-fold defaultstate="collapsed" desc="Query thread definition">
    private javax.swing.JButton btRunSave;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;

    //</editor-fold>
    private javax.swing.JButton jbAggregate;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbReset;
    private javax.swing.JButton jbSettings;
    private javax.swing.JCheckBox jcbIsRegex;
    private javax.swing.JComboBox<String> jcbSelection;
    private javax.swing.JPanel jpSelection;
    private javax.swing.JPanel jpTabs;

    public QueryDialog(ArrayList<IQueryResults> queries) throws Exception {
        super();
//        super(null, java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
//        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        initComponents();

        this.queries = queries;
        jpTabs.setLayout(new BoxLayout(jpTabs, BoxLayout.LINE_AXIS));
//        jpTabs.add(new TabbedPaneDemo(),BorderLayout.CENTER);
//        LookAndFeelFactory.installDefaultLookAndFeelAndExtension();
        Utils.swing.Swing.restrictHeight(jcbSelection);
        try {

            jpTabs.add(createTabbedPane());
//        jcbSelection.setText(id);
            reSetSelection();

            inquirer.getCr();
            setTitle(inquirer.getDialogTitle(getTitle()));

            aggregatePanel = new JPanel();
//        scrollPane.setPreferredSize(new Dimension(800, 512));
            aggregatePanel.setLayout(new BorderLayout());
            tabbedPane.addTab("Aggregates", aggregatePanel);
            pack();
        } catch (Exception e) {
            logger.error("Cannot create dialog, ", e);
        }
    }

    public int getCloseCause() {
        return closeCause;
    }

    public void addAggregate(IAggregateQuery q) {
        try {
            aggr.add(q);
        } catch (Exception e) {
            inquirer.logger.error("cannot add query " + q, e);
        }
    }

    public IAggregateQuery getAggregateQuery() {
        if (tabbedPane.getSelectedIndex() == tabbedPane.getTabCount() - 1) {// last tab is aggregate
            return aggrParams.getSelected();
        } else {
            return null;
        }
    }

    public void CenterWindow() {
        ScreenInfo.CenterWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpTabs = new javax.swing.JPanel();
        jpSelection = new javax.swing.JPanel();
        jcbSelection = new javax.swing.JComboBox<>();
        jcbIsRegex = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        btOK = new javax.swing.JButton();
        jbReset = new javax.swing.JButton();
        jbSettings = new javax.swing.JButton();
        btAllCalls = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbAggregate = new javax.swing.JButton();
        btRunSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Specify query parameters");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                WindowClosed(evt);
            }
        });

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.PAGE_AXIS));

        jpTabs.setBorder(javax.swing.BorderFactory.createTitledBorder("Report type"));
        jpTabs.setName("jpReports"); // NOI18N

        javax.swing.GroupLayout jpTabsLayout = new javax.swing.GroupLayout(jpTabs);
        jpTabs.setLayout(jpTabsLayout);
        jpTabsLayout.setHorizontalGroup(
                jpTabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 910, Short.MAX_VALUE)
        );
        jpTabsLayout.setVerticalGroup(
                jpTabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 261, Short.MAX_VALUE)
        );

        jPanel3.add(jpTabs);

        jpSelection.setBorder(javax.swing.BorderFactory.createTitledBorder("Search string"));
        jpSelection.setLayout(new javax.swing.BoxLayout(jpSelection, javax.swing.BoxLayout.LINE_AXIS));

        jcbSelection.setEditable(true);
        jcbSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        jpSelection.add(jcbSelection);

        jcbIsRegex.setText("Is regex");
        jpSelection.add(jcbIsRegex);

        jPanel3.add(jpSelection);

        jPanel5.setVerifyInputWhenFocusTarget(false);
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        btOK.setText("Run->Screen");
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });
        jPanel5.add(btOK);

        jbReset.setText("Reset");
        jbReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetActionPerformed(evt);
            }
        });
        jPanel5.add(jbReset);

        jbSettings.setText("Settings");
        jbSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSettingsActionPerformed(evt);
            }
        });
        jPanel5.add(jbSettings);

        btAllCalls.setText("All calls");
        btAllCalls.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                btAllCallsActionPerformed(e.getComponent(), e.getX(), e.getY());
            }
        });
        jPanel5.add(btAllCalls);

        jbCancel.setText("Close");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel5.add(jbCancel);

        jbAggregate.setText("Aggregate");
        jbAggregate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAggregateActionPerformed(evt);
            }
        });
        jPanel5.add(jbAggregate);

        btRunSave.setText("Run->File");
        btRunSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRunSaveActionPerformed(evt);
            }
        });
        jPanel5.add(btRunSave);

        jPanel3.add(jPanel5);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private QuerySetting getQuerySetting() {
        if (_querySetting == null) {
            _querySetting = new QuerySetting(null, rootPaneCheckingEnabled, inquirer.getCr());
            fixOversizedWindow(_querySetting);
        }
        return _querySetting;
    }

    public IDsFinder.RequestLevel getRequestLevel() {
        RequestParams requestParams = getRequestParams();
        if (requestParams != null) {
            return requestParams.getSearchLevel();
        } else {
            return RequestLevel.LevelMax;
        }
    }

    private void showDoneFileDialog(QueryDialog queryDialog, int nrows, String outFile) {
        if (dfg == null) {
            dfg = new DoneFileDialog(queryDialog);
        }
        dfg.doShow(nrows, outFile);
        if (dfg.getCloseCause() == JOptionPane.OK_OPTION) {
            System.out.println("OK selected");
            if (dfg.isTextpad()) {
                ExternalEditor.openTextpad(outFile, 0);
            } else if (dfg.isVim()) {
                ArrayList<String> files = new ArrayList<>(1);
                files.add(outFile);
                ExternalEditor.editFiles(files);
            } else if (dfg.isNotepad()) {
                ExternalEditor.openNotepad(outFile, 0);
            }
//            else if (dfg.isExcel()) {
//                ArrayList<String> files = new ArrayList<>(1);
//                files.add(outFile);
//                try {
//                    Excel.reportEdit(files);
//                } catch (IOException ex) {
//                    logger.error("fatal: ",  ex);
//                }
//            }
        }
    }

    private void btOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOKActionPerformed
        try {
            QueryTools.queryMessagesClear();
            IQueryResults theQuery = getSelectedQuery();
            inquirer.logger.info("Executing request [" + theQuery.getName() + "] search [" + theQuery.getSearchString() + "] sum[" + theQuery.getReportSummary() + "]");

            if (theQuery == null) {
                theQuery = getAggregateQuery();
            }
            theQuery.setQueryLimit(inquirer.getCr().isLimitQueryResults(), inquirer.getCr().getMaxQueryLines());

            QueryTask tsk = new QueryTask(this, theQuery, true);
            if (rp == null) {
                rp = new RequestProgress(this, true, tsk);
            }
            theQuery.setPrintAlone(false);
            tsk.setRp(rp);
            tsk.execute();
            rp.doShow();

        } catch (Exception ex) {
            inquirer.ExceptionHandler.handleException(this.getClass().toString(), ex);
        }

    }//GEN-LAST:event_btOKActionPerformed

    private void WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_WindowClosed
        DoneWork();
    }//GEN-LAST:event_WindowClosed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        WindowClosed(null);
        closeCause = 0;
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSettingsActionPerformed

        QuerySetting qs = getQuerySetting();
        qs.setLocationRelativeTo(this);
        qs.setVisible(true);
        if (qs.getCloseCause() == 1) {
            for (IQueryResults query : queries) {
                query.getReportItems().removeDynamicChildren();
                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    Component tabComponentAt = tabbedPane.getComponentAt(i);
                    if (tabComponentAt != null && tabComponentAt instanceof RequestParams) {
                        ((RequestParams) tabComponentAt).uncheckReport();
                    }

                }
//        Component selectedComponent = tabbedPane.getSelectedComponent();

            }
        }
    }//GEN-LAST:event_jbSettingsActionPerformed

    private void jbResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetActionPerformed
        // TODO add your handling code here:
        RequestParams currentRequest = getCurrentRequest();
        if (currentRequest != null) {
            currentRequest.reSet();
        }
    }//GEN-LAST:event_jbResetActionPerformed

    private void btAllCallsActionPerformed(Component c, int x, int y) {//GEN-FIRST:event_btAllCallsActionPerformed
        try {
            IQueryResults qry = getSelectedQuery();
            if (qry != null) {
                AllProcSettings getall = qry.getAllProc(SwingUtilities.windowForComponent(c), x, y);
                if (getall != null) {
                    class QueryAllTask extends MySwingWorker<Void, String> {

                        private final QueryDialog frm;
                        private final IQueryResults qry;
                        FullTableColors all;
                        private QueryAllJTable allCalls;
                        private RequestProgress rp;

                        public QueryAllTask(QueryDialog frm, IQueryResults qry) {
                            this.frm = frm;
                            this.qry = qry;
                            qry.setProgressCallback(new ProgressNotifications() {
                                @Override
                                void sayProgress(String s) {
                                    publish(s);
                                }
                            });
                        }

                        @Override
                        protected void process(List<String> chunks) {
                            rp.addProgress(chunks);
                        }

                        public void setRp(RequestProgress rp) {
                            this.rp = rp;
                        }

                        @Override
                        protected Void myDoInBackground() throws Exception {
                            all = getall.getProc().getAll(frm, getall.getSettings());
                            inquirer.logger.debug("do in b done");
                            return null;

                        }

                        @Override
                        protected void done() {
                            inquirer.logger.debug("done");
                            rp.dispose();
                            if (isCancelled()) {
                                JOptionPane.showMessageDialog(frm, "Query was cancelled", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                QueryTools.showQueryMessages(frm);

                                qry.showAllResults();
                                try {
                                    this.allCalls = new QueryAllJTable(qry, frm, all);
                                } catch (Exception ex) {
                                    logger.error("fatal: ", ex);
                                }
                                Dimension d = allCalls.getPreferredSize();
                                d.height = 400;
                                d.width += 50;
                                //            Dimension d = allApps.getPreferredSize();
                                //            d.height = 300;
                                //            d.width += 50;

                                JScrollPane jScrollPane = new JScrollPane(allCalls);
                                jScrollPane.setPreferredSize(d);
                                AllCallsFrame allCallsFrame = new AllCallsFrame(jScrollPane);
                                allCallsFrame.setTitle("All calls - " + qry.getAllCallsTitle(frm));
                                allCallsFrame.setVisible(true);
                            }
                        }

                    }
                    //</editor-fold>
                    QueryTools.queryMessagesClear();
                    QueryAllTask tsk = new QueryAllTask(this, qry);
                    RequestProgress rp = new RequestProgress(this, true, tsk);
                    tsk.setRp(rp);
                    tsk.execute();
                    rp.doShow();
                }

            }
        } catch (Exception exception) {
            inquirer.ExceptionHandler.handleException(this.getClass().toString(), exception);
        }
    }//GEN-LAST:event_btAllCallsActionPerformed

    private void jbAggregateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAggregateActionPerformed
        IQueryResults qry = getSelectedQuery();
        if (qry != null) {
            if (aggregateDialog == null) {
                aggregateDialog = new AggregateDialog(this);
            }
            try {
                aggregateDialog.setContentPanel(qry.getAggregatesPanel());
                aggregateDialog.doShow(qry.getName());
                if (aggregateDialog.getCloseCause() == OK_OPTION) {
                    inquirer.logger.info("run");
                    IAggregateQuery selected = aggregateDialog.getSelected();
                    selected.setQueryDialog(this);
                    if (aggregateDialog.isPrintToScreen()) {
                        selected.setPrintAlone(false);
                        QueryTools.queryMessagesClear();
                        QueryTask tsk = new QueryTask(this, selected);
                        if (rp == null) {
                            rp = new RequestProgress(this, true, tsk);
                        }
                        tsk.setRp(rp);
                        tsk.setDisplayForm(aggregateDialog.isPrintToScreen());
                        tsk.execute();
                        rp.doShow();

                    } else {
                        fileOutputConfig(selected);
                    }
                }
            } catch (SQLException ex) {
                inquirer.ExceptionHandler.handleException(this.getClass().toString(), ex);
            }
        }
    }//GEN-LAST:event_jbAggregateActionPerformed

    private void fileOutputConfig(QueryTools qry) {
        boolean isAggregate = qry instanceof IAggregateQuery;

        if (fileSaveSettings == null) {
            fileSaveSettings = new CancelRunDialog(this);
            fileOutSetting = new FileOutSettings();
            fileSaveSettings.setContentPanel(fileOutSetting);
            fileSaveSettings.pack();
        }
        if (isAggregate) {
            fileOutSetting.setOutDir(inquirer.getConfig().getFileNameLong(((IAggregateQuery) qry).getName(), null));
            fileSaveSettings.doShow(((IAggregateQuery) qry).getName() + " - file output settings");

        } else {
            fileOutSetting.setOutDir(inquirer.getConfig().getFileNameLong(((IQueryResults) qry).getName(), getSelection()));
            fileSaveSettings.doShow(((IQueryResults) qry).getName() + " - file output settings");
        }
        if (fileSaveSettings.getCloseCause() == OK_OPTION) {
            try {
                QueryTools.queryMessagesClear();
                QueryTask tsk = null;
                if (isAggregate) {
                    tsk = new QueryTask(this, (IAggregateQuery) qry);
                } else {
                    tsk = new QueryTask(this, (IQueryResults) qry, false);
                }

                if (rp == null) {
                    rp = new RequestProgress(this, true, tsk);
                }
                tsk.setRp(rp);
                tsk.setDisplayForm(false);
                qry.setPrintAlone(!fileOutSetting.isSort());
                qry.setQueryLimit(fileOutSetting.isLimitQueryResults(), fileOutSetting.getMaxQueryLines());

//                    DefaultFormatter fmt = new DefaultFormatter(false, null);
                ArrayList<ILogRecordFormatter> fmt = new ArrayList<>(1);
                if (fileOutSetting.isFull()) {
                    FullMessagesFormatter formatter = new FullMessagesFormatter();
                    fmt.add(formatter);
                } else {
                    DefaultFormatter defaultFormatter = null;
                    if (fileOutSetting.isFormatedFields()) {
                        defaultFormatter = new OutputSpecFormatterFile(inquirer.getXMLCfg(), true, null);

                    } else {
                        defaultFormatter = new DefaultFormatter(false, null);
                    }
                    defaultFormatter.setDelimiter(fileOutSetting.getDelimiter());
                    defaultFormatter.setPrintFileLine(fileOutSetting.isPrintFileLine());
                    defaultFormatter.setAllFields(fileOutSetting.isAllFields());
                    defaultFormatter.setHeaderOnTop(fileOutSetting.isHeaderOnTop());
                    defaultFormatter.setShouldAccessFiles(fileOutSetting.shouldAccessFiles());
                    defaultFormatter.setPrintRecordType(fileOutSetting.shouldPrintRecordType());
                    defaultFormatter.setExcel(fileOutSetting.isExcel());
                    fmt.add(defaultFormatter);
                }
//                    fmt.add(new OutputSpecFormatter(inquirer.getXMLCfg(),false, null));

                tsk.setFormatters(fmt);
                tsk.setOutFile(fileOutSetting.getOutFile());
                PrintStreams ps = new PrintStreams();
                qry.setPrintStreams(ps);
//                    if (fileOutSetting.isFull()) {
//                        ps.addFullStream("c:\\tmp\\out_full.txt", 500, false);
//                    } else {
                ps.addShortStream(fileOutSetting.getOutFile(), fileOutSetting.getRecordsLimit());
//                    }
                tsk.setPs(ps);

                tsk.execute();
                rp.doShow();

            } catch (Exception ex) {
                inquirer.ExceptionHandler.handleException(this.getClass().toString(), ex);
            }

        }
    }

    private void btRunSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunSaveActionPerformed
        IQueryResults qry = getSelectedQuery();
        if (qry != null) {
            fileOutputConfig(qry);
        }
    }//GEN-LAST:event_btRunSaveActionPerformed

    private JideTabbedPane createTabbedPane() throws Exception {

        try {
            tabbedPane = new JideTabbedPane(JideTabbedPane.TOP);
        } catch (Exception e) {
            logger.error("--", e);
        }
        tabbedPane.setOpaque(true);

        for (IQueryResults q : queries) {
//            JScrollPane scrollPane = new JScrollPane(new RequestParams(q));
//            scrollPane.setPreferredSize(new Dimension(800, 512));
//            tabbedPane.addTab(q.getName(), scrollPane);
            tabbedPane.addTab(q.getName(), new RequestParams(q, this));
//            tabbedPane.setEnabledAt(WIDTH, rootPaneCheckingEnabled);
        }
        for (int i = 0; i < tabbedPane.getTabCount(); i++) {
            RequestParams rp = (RequestParams) tabbedPane.getComponentAt(i);
//            inquirer.logger.info("rp.getQry() "+rp.getQry());
//            inquirer.logger.info("rp.getQry().getApps() "+rp.getQry().getApps());
//            inquirer.logger.info("rp.getQry().getApps().isEmpty() "+rp.getQry().getApps().isEmpty());
            if (rp.getQry() != null && rp.getQry().getApps() != null) {
                tabbedPane.setEnabledAt(i, !rp.getQry().getApps().isEmpty());
            } else {
                tabbedPane.setEnabledAt(i, false);
            }
        }
        for (int i = 0; i < tabbedPane.getTabCount(); i++) {
            if (tabbedPane.isEnabledAt(i)) {
                tabbedPane.setSelectedIndex(i);
                break;
            }
        }

        tabbedPane.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                try {
                    tabChanged(e);
                } catch (Exception ex) {
                    inquirer.ExceptionHandler.handleException(this.getClass().toString(), ex);
                }
            }

        });

        tabbedPane.setTabEditingValidator(new TabEditingValidator() {
            @Override
            public boolean alertIfInvalid(int tabIndex, String tabText) {
                if (tabText.trim().length() == 0) {
                    JideOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(tabbedPane), "'" + tabText + "' is an invalid name for a tab title.", "Invalid Tab Title", JideOptionPane.ERROR_MESSAGE, null);
                    return false;
                }

                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    if (tabText.trim().equalsIgnoreCase(tabbedPane.getDisplayTitleAt(i)) && i != tabbedPane.getSelectedIndex()) {
                        JideOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(tabbedPane), "There is already a tab with the title of '" + tabText + "'.", "Invalid Tab Title", JideOptionPane.ERROR_MESSAGE, null);
                        return false;
                    }
                }
                return true;
            }

            @Override
            public boolean isValid(int tabIndex, String tabText) {
                if (tabText.trim().length() == 0) {
                    return false;
                }

                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    if (tabText.trim().equalsIgnoreCase(tabbedPane.getDisplayTitleAt(i)) && i != tabbedPane.getSelectedIndex()) {
                        return false;
                    }
                }
                return true;
            }

            @Override
            public boolean shouldStartEdit(int tabIndex, MouseEvent event) {
                return true;
            }
        });
        return tabbedPane;
    }

    private void tabChanged(ChangeEvent e) {
        if (tabbedPane.getSelectedIndex() == tabbedPane.getTabCount() - 1) {
            if (aggrParams == null) {
                try {
                    if (DatabaseConnector.fileExits(FileInfoType.type_CallManager)) {
                        addAggregate(new AggrTLibAllCalls());
                    }
                    addAggregate(new AggrTimestampDelays());
                    if (DatabaseConnector.fileExits(FileInfoType.type_CallManager)) {
                        addAggregate(new AggrSIPRetransmits());
                    }
                    if (DatabaseConnector.fileExits(FileInfoType.type_CallManager)) {
                        addAggregate(new AggrJSONDuration());
                    }
                    if (DatabaseConnector.fileExits(FileInfoType.type_CallManager)) {
                        addAggregate(new AggrSIPServerCallsPerSecond(DatabaseConnector.TableExist("sip_logbr")));
                    }
                    if (DatabaseConnector.fileExits(FileInfoType.type_ORS)) {
                        addAggregate(new AggrORSDuration());
                    }
                    if (DatabaseConnector.fileExits(FileInfoType.type_CallManager)) {
                        addAggregate(new AggrORSPerSecond());
                    }
                    if (DatabaseConnector.fileExits(FileInfoType.type_OCS)) {
                        addAggregate(new AggrOCSDBServerDelays());
                    }

                    aggrParams = new AggregatesPanel(aggr);

                    aggregatePanel.add(aggrParams);
                } catch (Exception ex) {
                    inquirer.ExceptionHandler.handleException(this.getClass().toString(), ex);
                }
            }
        }
        RequestParams currentRequest = getCurrentRequest();
        boolean selEnabled = (currentRequest != null && currentRequest.getSelectionType() != SelectionType.NO_SELECTION);
        enableSearchItems(selEnabled);
    }

    public RequestParams getCurrentRequest() {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent);
        }
        return null;
    }

    public IQueryResults getSelectedQuery() {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent).getQry();
        }
//        if( selectedComponent!=null && selectedComponent instanceof JScrollPane){
//            JScrollPane pane=(JScrollPane)selectedComponent;
//            for (Component comp : pane.getComponents()) {
//                if( comp instanceof RequestParams){
//                    return ((RequestParams)comp).getQry();
//                }
//            }
//        }
//        selectedComponent.g
        return null;
    }

    public String getSelection() {
        String name = (String) jcbSelection.getSelectedItem();
        return (name != null) ? name.trim() : null;
    }

    public ArrayList<Integer> getSearchApps() {
        return getSearchApps(false);
    }
    // End of variables declaration                   

    public SelectionType getSelectionType() {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent).getSelectionType();
        }
        return null;
    }

    public int getMaxRecords() {
        return inquirer.getCr().getMaxRecords();
//        Component selectedComponent = tabbedPane.getSelectedComponent();
//        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
//            return ((RequestParams) selectedComponent).getMaxRecords();
//        }
//        return 100;
    }

    public boolean isRegex() {
        return jcbIsRegex.isSelected();
    }

    private void DoneWork() {
        inquirer.logger.info("Done work");
        synchronized (this) {
            inquirer.logger.info("Done work completely");
            if (Utils.Util.getOS() == Util.OS.WINDOWS) {
                WindowsSystemUtility.closeApp();
            }
            this.dispose();
            this.notify();
        }
    }

    ArrayList<Integer> getSearchApps(boolean b) {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent).getSearchApps(b);
        }
        return null;
    }

    ArrayList<String> getSearchAppsName(boolean b) {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent).getSearchAppsName(b);
        }
        return null;
    }

    private RequestParams getRequestParams() {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return (RequestParams) selectedComponent;
        }
        return null;
    }

    public UTCTimeRange getTimeRange() throws SQLException {
        Component selectedComponent = tabbedPane.getSelectedComponent();
        if (selectedComponent != null && selectedComponent instanceof RequestParams) {
            return ((RequestParams) selectedComponent).getTimeRange();
        }
        return null;
    }

    void enableSearchItems(boolean selEnabled) {
        jcbSelection.setEnabled(selEnabled);
        jcbIsRegex.setEnabled(selEnabled);
    }

    public void addSelection(String s) {
        inquirer.geLocaltQuerySettings().saveSearch(s);
        reSetSelection();

    }

    public void reSetSelection() {
        EnterRegexDialog.setJCBElements(jcbSelection, inquirer.geLocaltQuerySettings().getSavedSearches());

    }

    String getSettingSummary() {
        StringBuilder ret = new StringBuilder(512);
        RequestParams requestParams = getRequestParams();
        if (requestParams != null) {
            ArrayList<String> searchAppsName = requestParams.getSearchAppsName(false);
            if (searchAppsName != null && !searchAppsName.isEmpty()) {
                ret.append("apps (").append(StringUtils.join(searchAppsName, ", ")).append(")");
            }
//            ret.append(requestParams.getFiltersSummary());
        }
        return ret.toString();
    }

    class QueryTask extends MySwingWorker<Void, String> {

        IQueryResults qry = null;
        PrintStreams ps = null;
        ArrayList<ILogRecordFormatter> formatters = null;
        String theTitle = "";
        ReportFrame frm = null;
        private String outFile;
        private boolean displayForm;
        private final QueryDialog queryDialog;
        private RequestProgress rp = null;

        private QueryTask(QueryDialog frm, IAggregateQuery selected) {
            this.queryDialog = frm;
            setQuery(selected);
        }

        public QueryTask(QueryDialog frm, IQueryResults theQuery, boolean displayForm) {
            this.queryDialog = frm;
            setQuery(theQuery);
            this.displayForm = displayForm;
        }

        public void setDisplayForm(boolean displayForm) {
            this.displayForm = displayForm;
        }

        @Override
        protected void process(List<String> chunks) {
            rp.addProgress(chunks);
        }

        public void setRp(RequestProgress rp) {
            this.rp = rp;
        }

        public void setFormatters(ArrayList<ILogRecordFormatter> formatters) {
            this.formatters = formatters;
        }

        public void setPs(PrintStreams ps) {
            this.ps = ps;
        }

        @Override
        protected Void myDoInBackground() throws Exception {

            inquirer inq = inquirer.getInq();
            InquirerCfg cfg = inquirer.getConfig();
            addSelection(getSelection());

            if (ps == null) {
                ps = new PrintStreams(cfg);
                ps.addMemoryPrint();
            }

            if (qry != null) {
                qry.resetOutput();
                if (qry instanceof IAggregateQuery) {
                    ps.setAggregate(true);
                    IAggregateQuery iaq = (IAggregateQuery) qry;
                    if (formatters == null) {
                        iaq.setFormatters(inq.getFormatters());
                    } else {
                        iaq.setFormatters(formatters);
                    }

                    inq.doRetrieve(iaq, queryDialog);
                    if (!qry.isPrintAlone()) {
                        iaq.doPrint(ps);
                    }
                    if (displayForm) {
                        if (iaq.needPrint()) {
                            if (displayForm) {
                                frm = new ReportFrameQuery(ps);
                            }
                        } else {
                            if (displayForm) {
                                frm = new ReportFrameAggregate(ps, iaq);
                            }

                        }
                        theTitle = iaq.getReportSummary().replaceAll("\n", " ");
                    }
                } else {
                    try {
                        qry.reset();
                        if (formatters == null) {
                            qry.setFormatters(inq.getFormatters());
                        } else {
                            qry.setFormatters(formatters);
                        }
                        if (Thread.currentThread().isInterrupted()) {
                            throw new RuntimeInterruptException();
                        }
                        qry.doRetrieve(queryDialog);
                        if (Thread.currentThread().isInterrupted()) {
                            throw new RuntimeInterruptException();
                        }
                        if (!qry.isPrintAlone()) {
                            qry.doPrint(ps);
                        }
                        if (Thread.currentThread().isInterrupted()) {
                            throw new RuntimeInterruptException();
                        }
                        if (displayForm) {
                            try {
                                String reportSummary = qry.getReportSummary().replaceAll("\n", " ");
                                theTitle = reportSummary;
                            } catch (Exception e) {
                                theTitle = qry.getName();
                            }
                            try {
                                frm = new ReportFrameQuery(ps);
                            } catch (Exception e) {
                                inquirer.logger.error("error creating form", e);
                            }
                        }
                    } catch (Exception exception) {
                        inquirer.logger.error("interrupted: ", exception);
                    }
                }
                InquirerFileIo.doneIO();
                ps.closeStreams();
            }
            return null;
        }

        @Override
        protected void done() {
            inquirer.logger.debug("swingworker done");
            rp.dispose();
            if (isCancelled()) {
                JOptionPane.showMessageDialog(queryDialog, "Query was cancelled", "Error", JOptionPane.ERROR_MESSAGE);
                ps.closeStreams();
            } else {
                QueryTools.showQueryMessages(frm);

                if (ps.getNrows() > 0 || ps.getTabDataModel().getRowCount() > 0) {
                    if (displayForm) {
                        if (frm != null) {
                            frm.setTitle(inquirer.getDialogTitle(theTitle));
//                            ScreenInfo.setVisible(queryDialog, frm, true);
                            frm.setLocationRelativeTo(queryDialog);
                            frm.setExtendedState(MAXIMIZED_BOTH);
//                            ScreenInfo.CenterWindowMaxWidth(queryDialog, frm);
                            frm.setVisible(true);
                        }
                    } else {
                        showDoneFileDialog(queryDialog, ps.getNrows(), outFile);
                    }
                } else {
                    int objectsFound = qry.getObjectsFound();
                    if (objectsFound == 0) {
                        JideOptionPane.showMessageDialog(queryDialog, "Nothing found.\n"
                                + "Try changing search parameters", "cannot run report", ERROR_MESSAGE);
                    } else {
                        JideOptionPane.showMessageDialog(queryDialog,
                                "Your search yielded " + objectsFound + " objects, however\n"
                                        + "no records returned\n"
                                        + "Try changing filters or search", "cannot run report", JideOptionPane.WARNING_MESSAGE);
                    }
                    if (frm != null) {
                        frm.dispose();
                    }
                }

            }
        }

        private void setQuery(IQueryResults theQuery) {
            if (theQuery != null) {
                qry = theQuery;
                qry.setProgressCallback(new ProgressNotifications() {
                    @Override
                    void sayProgress(String s) {
                        publish(s);
                    }
                });
            }
        }

        private void setOutFile(String outFile) {
            this.outFile = outFile;
        }

    }

    class DoneFileDialog extends StandardDialog {

        private final JLabel lblFile;
        protected JPanel aggregatesPanel;
        protected JPanel bannerPanel;
        protected JLabel lbl;
        JRadioButton vimButton;
        //        private final JRadioButton excelButton;
        JRadioButton texpadButton;
        JRadioButton notepadButton;
        JRadioButton doneButton;
        JPanel listPane;
        private int closeCause = JOptionPane.CANCEL_OPTION;
        private String outFile;
        private int nrows;

        DoneFileDialog(Window parent) {
            super(parent);

            setTitle("Report complete");

            listPane = new JPanel(new GridLayout(0, 1));

            vimButton = new JRadioButton("Open in VIM");
//            vimButton.addActionListener(this);
            texpadButton = new JRadioButton("Open in TextPad");
//            texpadButton.addActionListener(this);
            notepadButton = new JRadioButton("Open in NotePad++");
//            excelButton = new JRadioButton("Open in Excel");
//            notepadButton.addActionListener(this);
            doneButton = new JRadioButton("Done");
//            doneButton.addActionListener(this);

//Group the radio buttons.
            ButtonGroup group = new ButtonGroup();
            group.add(vimButton);
            group.add(texpadButton);
            group.add(notepadButton);
            group.add(doneButton);
//             group.add(excelButton);
            listPane.add(vimButton);
            listPane.add(texpadButton);
            listPane.add(notepadButton);
            listPane.add(doneButton);
//            listPane.add(excelButton);

            bannerPanel = new JPanel();
            bannerPanel.setLayout(new GridLayout(0, 1));
            lbl = new JLabel();
            lblFile = new JLabel();
            bannerPanel.add(lblFile);
            bannerPanel.add(lbl);
        }

        public int getCloseCause() {
            return closeCause;
        }

        public void setCloseCause(int closeCause) {
            this.closeCause = closeCause;
        }

        boolean isVim() {
            return vimButton.isSelected();
        }

        boolean isTextpad() {
            return texpadButton.isSelected();
        }

        boolean isNotepad() {
            return notepadButton.isSelected();
        }
//        boolean isExcel() {
//            return excelButton.isSelected();
//        }

        public void doShow() {
            lblFile.setText("Created file " + outFile);
            lbl.setText("Extracted " + nrows + " records");

            vimButton.setSelected(true);
            setModal(true);

            pack();
            invalidate();
//            ScreenInfo.CenterWindow(this);
            this.setLocationRelativeTo(getParent());
            setVisible(
                    true);
        }

        @Override
        public JComponent createBannerPanel() {
            return bannerPanel;
        }

        @Override
        public JComponent createContentPanel() {

            return listPane;
        }

        private void cancelButtonAction(ActionEvent e) {
            setDialogResult(RESULT_CANCELLED);
            setCloseCause(JOptionPane.CANCEL_OPTION);
            setVisible(false);
            dispose();

        }

        private void runButtonAction(ActionEvent e) {
            setDialogResult(RESULT_AFFIRMED);
            setCloseCause(JOptionPane.OK_OPTION);
            setVisible(false);
            dispose();

        }

        @Override
        public ButtonPanel createButtonPanel() {
            ButtonPanel buttonPanel = new ButtonPanel();
            JButton cancelButton = new JButton(new AbstractAction("Close") {
                @Override
                public void actionPerformed(ActionEvent e) {
                    cancelButtonAction(e);
                }
            });
            buttonPanel.addButton(cancelButton);

            JButton jbRun = new JButton(new AbstractAction("Select") {
                @Override
                public void actionPerformed(ActionEvent e) {
                    runButtonAction(e);
                }
            });
            buttonPanel.addButton(jbRun);

            setDefaultCancelAction(cancelButton.getAction());
            setDefaultAction(jbRun.getAction());
            getRootPane().setDefaultButton(jbRun);

            buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            buttonPanel.setSizeConstraint(ButtonPanel.NO_LESS_THAN); // since the checkbox is quite wide, we don't want all of them have the same size.
            return buttonPanel;
        }

        public void doShow(String theTitle) {
            this.setTitle(theTitle);
            doShow();
        }

        public void setContentPanel(JPanel aggregatesPanel) {
            listPane.removeAll();
            listPane.add(aggregatesPanel);
            this.aggregatesPanel = aggregatesPanel;
            listPane.invalidate();
        }

        private void doShow(int nrows, String outFile) {
            this.nrows = nrows;
            this.outFile = outFile;
            doShow();
        }

    }

    class CancelRunDialog extends StandardDialog {

        protected JPanel aggregatesPanel;
        JPanel listPane;
        private int closeCause = JOptionPane.CANCEL_OPTION;

        CancelRunDialog(Window parent) {
            super(parent);
            listPane = new JPanel(new BorderLayout(10, 10));
        }

        public int getCloseCause() {
            return closeCause;
        }

        public void setCloseCause(int closeCause) {
            this.closeCause = closeCause;
        }

        public void doShow() {
            setModal(true);

            pack();
//            ScreenInfo.CenterWindow(this);
            this.setLocationRelativeTo(getParent());
            setVisible(
                    true);
        }

        @Override
        public JComponent createBannerPanel() {
            return null;
        }

        @Override
        public JComponent createContentPanel() {

            return listPane;
        }

        private void cancelButtonAction(ActionEvent e) {
            setDialogResult(RESULT_CANCELLED);
            setCloseCause(JOptionPane.CANCEL_OPTION);
            setVisible(false);
            dispose();

        }

        private void runButtonAction(ActionEvent e) {
            setDialogResult(RESULT_AFFIRMED);
            setCloseCause(JOptionPane.OK_OPTION);
            setVisible(false);
            dispose();

        }

        @Override
        public ButtonPanel createButtonPanel() {
            ButtonPanel buttonPanel = new ButtonPanel();
            JButton cancelButton = new JButton(new AbstractAction("Close") {
                @Override
                public void actionPerformed(ActionEvent e) {
                    cancelButtonAction(e);
                }
            });
            buttonPanel.addButton(cancelButton);

            JButton jbRun = new JButton(new AbstractAction("Execute") {
                @Override
                public void actionPerformed(ActionEvent e) {
                    runButtonAction(e);
                }
            });
            buttonPanel.addButton(jbRun);

            setDefaultCancelAction(cancelButton.getAction());
            setDefaultAction(jbRun.getAction());
            getRootPane().setDefaultButton(jbRun);

            buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            buttonPanel.setSizeConstraint(ButtonPanel.NO_LESS_THAN); // since the checkbox is quite wide, we don't want all of them have the same size.
            return buttonPanel;
        }

        public void doShow(String theTitle) {
            this.setTitle(theTitle);
            doShow();
        }

        public void setContentPanel(JPanel aggregatesPanel) {
            listPane.removeAll();
            listPane.add(aggregatesPanel);
            this.aggregatesPanel = aggregatesPanel;
            listPane.invalidate();
        }

    }

    class AggregateDialog extends CancelRunDialog {

        private final JPanel bannerPanel;

        AggregateDialog(Window parent) {
            super(parent);
            this.bannerPanel = new JPanel(new BorderLayout(20, 20));
            bannerPanel.setBorder(new BevelBorder(BevelBorder.RAISED));
            JLabel ta = new JLabel();
//            ta.setEditable(false);
            ta.setFocusable(false);
            ta.setHorizontalAlignment(SwingConstants.CENTER);
            ta.setVerticalAlignment(SwingConstants.CENTER);
            ta.setText("<html><b>On main window select application(s) and time range</b></html>");

            bannerPanel.add(ta);
        }

        @Override
        public JComponent createBannerPanel() {
            return bannerPanel; //To change body of generated methods, choose Tools | Templates.
        }

        public IAggregateQuery getSelected() {
            return ((AggregatesPanel) aggregatesPanel).getSelected();
        }

        public boolean isPrintToScreen() {
            return ((AggregatesPanel) aggregatesPanel).isPrintToScreen();
        }

        @Override
        public void doShow(String theTitle) {
            super.doShow("Select and Configure aggregate for " + theTitle);
        }

    }

}
