/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myutils.logbrowser.inquirer.gui;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePickerSettings;
import com.github.lgooddatepicker.optionalusertools.PickerUtilities;
import com.myutils.logbrowser.inquirer.UTCTimeRange;
import com.myutils.logbrowser.inquirer.inquirer;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import javax.swing.JButton;
import javax.swing.JLabel;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author Stepan
 */
public class TDateRange extends javax.swing.JPanel {

    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger();

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled); //To change body of generated methods, choose Tools | Templates.
        refreshBt.setEnabled(enabled);
        dtFrom.setEnabled(enabled);
        dtTo.setEnabled(enabled);
        jlFrom.setEnabled(enabled);
        jlTo.setEnabled(enabled);
    }

    public interface IRefresh {

        UTCTimeRange Refresh();
    }

    private IRefresh refreshCB = null;

    public IRefresh getRefreshCB() {
        return refreshCB;
    }

    public void setRefreshCB(IRefresh refreshCB) {
        this.refreshCB = refreshCB;
        refreshBt = new JButton("refresh");
        add(refreshBt);

        refreshBt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IRefresh refreshCB1 = getRefreshCB();
                if (refreshCB1 != null) {
                    setTimeRange(refreshCB1.Refresh());
                }
            }
        });

    }

    private JButton refreshBt;

    /**
     * Creates new form TDateRange
     */
    JLabel jlFrom;
    JLabel jlTo;

    public TDateRange() {

        initComponents();
//        setLocationRelativeTo(null);
        setLayout(new FlowLayout());

        jlFrom = new JLabel("From");
        add(jlFrom);
        dtFrom = newPicker();
        add(dtFrom);
        jlTo = new JLabel("To");
        add(jlTo);
        dtTo = newPicker();
        add(dtTo);

        dtFrom.getTimePicker().getSettings().setDisplayToggleTimeMenuButton(true);
        dtTo.getTimePicker().getSettings().setDisplayToggleTimeMenuButton(true);
    }

    private final DateTimePicker dtFrom;
    private final DateTimePicker dtTo;

    private DateTimePicker newPicker() {
        DateTimePicker dateTimePicker1 = new DateTimePicker();
//        dateTimePicker1.datePicker.setDate(LocalDate.now());
//        dateTimePicker1.timePicker.setTimeToNow();
        TimePickerSettings timeSettings = dateTimePicker1.getTimePicker().getSettings();
        timeSettings.setFormatForDisplayTime(PickerUtilities.createFormatterFromPatternString(
                "HH:mm:ss", timeSettings.getLocale()));
        timeSettings.setFormatForMenuTimes(PickerUtilities.createFormatterFromPatternString(
                "HH:mm:ss", timeSettings.getLocale()));
        return dateTimePicker1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 154, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public UTCTimeRange getTimeRange() throws SQLException {
        if (dtFrom.isEnabled() && dtTo.isEnabled()) {
            UTCTimeRange range = new UTCTimeRange();

            range.setStart(getUtcTime(dtFrom.getDateTimePermissive(), zoneId, 0));
            range.setEnd(getUtcTime(dtTo.getDateTimePermissive(), zoneId, 1));
//        inquirer.logger.info("setTimeRange " + range.get(0) + " to " + range.get(1));
            return range;
        }
        return null;
    }
    public static final ZoneId zoneId = ZoneId.systemDefault();

    public static long getUTCTime(DateTimePicker dtp, int adjustment) {
        return getUtcTime(dtp.getDateTimePermissive(), zoneId, adjustment);
    }

    public static void setTimeRange(DateTimePicker dtp, long time) {
        ZonedDateTime zoneDateTime = (Instant.ofEpochMilli(time)).atZone(zoneId);

        dtp.setDateTimePermissive(zoneDateTime.toLocalDateTime());
        DatePickerSettings dateSettings = dtp.getDatePicker().getSettings();
//        dateSettings.setDateRangeLimits(zoneDateTime.toLocalDate(), zoneDateTime.toLocalDate());

//            long toEpochDay = dtFrom.getDatePicker().getDate().atTime(LocalTime.MIN)
//            inquirer.logger.info("getTimeRange toEpochDay " + toEpochDay);
//            long toNanoOfDay = dtFrom.getTimePicker().getTime().toNanoOfDay();
//            inquirer.logger.info("getTimeRange toNanoOfDay " + toEpochDay +"total: "+toEpochDay*1000000+toNanoOfDay);
//            instantFrom = dtLocalFrom.toInstant(ZoneOffset.UTC);
//            inquirer.logger.info("instant: "+instantFrom+" getTimeRange " + instantFrom.getEpochSecond() + " to " + instantFrom.getNano());
    }

    public void setTimeRange(UTCTimeRange timeRange) {
        dtFrom.setEnabled(!(timeRange == null));
        dtTo.setEnabled(!(timeRange == null));

        if (timeRange == null) {
            dtFrom.getDatePicker().clear();
            dtFrom.getTimePicker().clear();
            dtTo.getDatePicker().clear();
            dtTo.getTimePicker().clear();
        } else {
            inquirer.logger.debug("setTimeRange " + timeRange.getStart() + " to " + timeRange.getEnd());
            setTimeRange(dtFrom, timeRange.getStart());
            setTimeRange(dtTo, timeRange.getEnd());

        }
    }

    static private Long getUtcTime(LocalDateTime dateTime, ZoneId zoneId, int adjustment) {
        inquirer.logger.debug("getUtcTime " + dateTime);
        return (dateTime.toInstant(zoneId.getRules().getOffset(dateTime)).getEpochSecond() + adjustment) * 1000;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
