/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myutils.logbrowser.inquirer.gui;

import org.apache.logging.log4j.LogManager;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.util.List;

import static Utils.Util.pDuration;

/**
 * @author ssydoruk
 */
@SuppressWarnings({"unchecked", "rawtypes", "serial"})
public class RequestProgress extends javax.swing.JDialog {

    public static final Object dialogStarted = new Object();
    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger();
    ElapsedTimer elapsedTimer = null;
    private final MySwingWorker wrk;
    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JTextArea taMessages;
    private javax.swing.JLabel tfSecondsElapsed;
    /**
     * Creates new form RequestProgress
     */
    public RequestProgress(java.awt.Frame parent, boolean modal, MySwingWorker wrk) {
        super(parent, modal);
        initComponents();
        this.wrk = wrk;
        DefaultCaret caret = (DefaultCaret) taMessages.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }
    public RequestProgress() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfSecondsElapsed = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taMessages = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Executing request...");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setText("Elapsed");
        jPanel3.add(jLabel1);

        tfSecondsElapsed.setFocusable(false);
        jPanel3.add(tfSecondsElapsed);

        getContentPane().add(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Operations..."));
        jPanel2.setLayout(new java.awt.BorderLayout());

        taMessages.setEditable(false);
        taMessages.setColumns(50);
        taMessages.setRows(20);
        jScrollPane1.setViewportView(taMessages);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2);

        jbCancel.setText("Terminate current task");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        logger.info("interrupt process selected");
        wrk.myCancel(true);

    }//GEN-LAST:event_jbCancelActionPerformed

    public void doShow() {

//        synchronized (dialogStarted) {
//            try {
//                Thread.sleep(300);
//                if (!wrk.isDone() && !wrk.isCancelled()) {
        pack();
        setLocationRelativeTo(getParent());
        taMessages.setText(null);
//                    ScreenInfo.CenterWindow(this);
        elapsedTimer = new ElapsedTimer();
        elapsedTimer.execute();
        setVisible(true);
//                    dialogStarted.notifyAll();
//                }
//            } catch (InterruptedException interruptedException) {
//            }
//        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//        inquirer.logger.info("Progress window closed");

        if (elapsedTimer != null) {
            elapsedTimer.cancel(true);
            elapsedTimer = null;
//            inquirer.logger.info("Canceling elapsed timer");
        }
    }//GEN-LAST:event_formWindowClosed

    public void addProgress(List<String> chunks) {
        for (String chunk : chunks) {
            logger.trace("Displaying progress: " + chunk);
            taMessages.append(chunk + "\n");
        }
    }
    // End of variables declaration                   

    class ElapsedTimer extends SwingWorker<Void, Integer> {

        private int seconds;

        public ElapsedTimer() {
            this.seconds = 0;
        }

        @Override
        protected Void doInBackground() throws Exception {
            while (!isCancelled()) {
                publish(seconds);
                Thread.sleep(1000);
                seconds++;
            }
            return null;
        }

        @Override
        protected void process(List<Integer> chunks) {
            for (Integer chunk : chunks) {
//                    tfSecondsElapsed.t
                tfSecondsElapsed.setText(pDuration(chunk.intValue() * 1000L, false));
                tfSecondsElapsed.invalidate();
//                    inquirer.logger.info("Elapsed timer: " + com.myutils.logbrowser.indexer.Main.pDuration(chunk.intValue() * 1000, false));
            }
            tfSecondsElapsed.repaint();
        }
    }
}
