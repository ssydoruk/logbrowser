/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myutils.logbrowser.inquirer;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author ssydoruk
 */
public class GroupByPanel extends javax.swing.JPanel {

    /**
     * Creates new form GroupByPanel
     */
    public GroupByPanel() {
        initComponents();
    }

    GroupByPanel(ArrayList<DBField> flds, String panelTitle) {
        this();
        ((TitledBorder) getBorder()).setTitle(panelTitle);
        DefaultListModel<MenuItem> lmAvailable = new DefaultListModel<>();
        jlAvailable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jlAvailable.setLayoutOrientation(JList.VERTICAL);

//        for (Map.Entry<String, String> entry : flds.entrySet()) {
//            lmAvailable.addElement(new MenuItem(entry.getKey(), entry.getValue()));
//
//        }
        for (DBField fld : flds) {
            lmAvailable.addElement(new MenuItem(fld.getScreenLabel(), fld));

        }
        jlAvailable.setModel((ListModel) lmAvailable);
//        if (!lmAvailable.isEmpty()) {
//            jlAvailable.setSelectedIndex(0);
//        }

        jlAvailable.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                jlAvailableChanged(evt);
            }

        });

        jlInList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                jlInListChanged(evt);
            }

        });

        jlAvailable.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                inquirer.logger.debug("is focusGained");
            }

            @Override
            public void focusLost(FocusEvent e) {
                inquirer.logger.debug("is focusLost");
            }
        });

        jlInList.setModel(new DefaultListModel<>());
        setMoveButtonsState();
        setUpDownButtonsState();

    }

    private void jlInListChanged(ListSelectionEvent evt) {
        setMoveButtonsState();
        setUpDownButtonsState();
    }

    private void jlAvailableChanged(ListSelectionEvent evt) {
//        JList cb = (JList) evt.getSource();
//        Object selectedValue = cb.getSelectedValue();
//        if (selectedValue != null) {
//            inquirer.logger.debug("is not null");
//        } else {
//            inquirer.logger.debug("is null");
//        }
        setMoveButtonsState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbMoveCurrent = new javax.swing.JButton();
        jbMoveAll = new javax.swing.JButton();
        jbRemoveCurrent = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jbUp = new javax.swing.JButton();
        jbDown = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlAvailable = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlInList = new javax.swing.JList<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jbMoveCurrent.setText(">");
        jbMoveCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveCurrentActionPerformed(evt);
            }
        });

        jbMoveAll.setText(">>");
        jbMoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveAllActionPerformed(evt);
            }
        });

        jbRemoveCurrent.setText("<");
        jbRemoveCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveCurrentActionPerformed(evt);
            }
        });

        jbRemoveAll.setText("<<");
        jbRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveAllActionPerformed(evt);
            }
        });

        jbUp.setText("up");
        jbUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpActionPerformed(evt);
            }
        });

        jbDown.setText("down");
        jbDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDownActionPerformed(evt);
            }
        });

        jLabel1.setText("Available");

        jLabel2.setText("Selected");

        jScrollPane1.setViewportView(jlAvailable);

        jScrollPane2.setViewportView(jlInList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jbRemoveCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbMoveAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbRemoveAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbMoveCurrent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbUp, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel2)))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jbUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDown))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jbMoveCurrent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbMoveAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRemoveCurrent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRemoveAll))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbMoveCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveCurrentActionPerformed
        ListSelectionModel selectAvailableModel = jlAvailable.getSelectionModel();
        DefaultListModel<MenuItem> modelAvailable = (DefaultListModel) jlAvailable.getModel();
        DefaultListModel<MenuItem> inModel = (DefaultListModel) jlInList.getModel();
        int size = modelAvailable.getSize();
        for (int i = 0; i < size; i++) {
            if (selectAvailableModel.isSelectedIndex(i)) {
                inModel.addElement(modelAvailable.getElementAt(i));
            }
        }
        for (int i = 0; i < size; i++) {
            if (selectAvailableModel.isSelectedIndex(i)) {
                modelAvailable.remove(i);
            }
        }
        setUpDownButtonsState();
    }//GEN-LAST:event_jbMoveCurrentActionPerformed

    private void jbMoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveAllActionPerformed
        DefaultListModel<String> modelAvailable = (DefaultListModel<String>) jlAvailable.getModel();
        DefaultListModel<String> inModel = (DefaultListModel) jlInList.getModel();
        for (int i = 0; i < modelAvailable.getSize(); i++) {
            inModel.addElement(modelAvailable.getElementAt(i));
        }
        modelAvailable.clear();
        setMoveButtonsState();
//        setUpDownButtonsState();
    }//GEN-LAST:event_jbMoveAllActionPerformed

    private void jbRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveAllActionPerformed
        DefaultListModel<String> modelIn = (DefaultListModel<String>) jlInList.getModel();
        DefaultListModel<String> modelAvailable = (DefaultListModel) jlAvailable.getModel();
        for (int i = 0; i < modelIn.getSize(); i++) {
            modelAvailable.addElement(modelIn.getElementAt(i));
        }
        modelIn.clear();
        setMoveButtonsState();
    }//GEN-LAST:event_jbRemoveAllActionPerformed

    private void jbDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDownActionPerformed
        int selectedIndex = jlInList.getSelectedIndex();
        if (selectedIndex < jlInList.getModel().getSize() - 1) {
            DefaultListModel<MenuItem> model = (DefaultListModel) jlInList.getModel();
            MenuItem remove = model.remove(selectedIndex);
            model.add(selectedIndex + 1, remove);
            jlInList.setSelectedIndex(selectedIndex + 1);
        }    }//GEN-LAST:event_jbDownActionPerformed

    private void jbUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpActionPerformed
        int selectedIndex = jlInList.getSelectedIndex();
        if (selectedIndex > 0) {
            DefaultListModel<MenuItem> model = (DefaultListModel) jlInList.getModel();
            MenuItem remove = model.remove(selectedIndex);
            model.add(selectedIndex - 1, remove);
            jlInList.setSelectedIndex(selectedIndex - 1);
        }
    }//GEN-LAST:event_jbUpActionPerformed

    private void jbRemoveCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveCurrentActionPerformed
        ListSelectionModel modelSelect = jlInList.getSelectionModel();
        DefaultListModel<MenuItem> modelIn = (DefaultListModel) jlInList.getModel();
        DefaultListModel<MenuItem> modelAvail = (DefaultListModel) jlAvailable.getModel();
        int size = modelIn.getSize();
        for (int i = 0; i < size; i++) {
            if (modelSelect.isSelectedIndex(i)) {
                modelAvail.addElement(modelIn.getElementAt(i));
            }
        }
        for (int i = 0; i < size; i++) {
            if (modelSelect.isSelectedIndex(i)) {
                modelIn.remove(i);
            }
        }
        setUpDownButtonsState();
    }//GEN-LAST:event_jbRemoveCurrentActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbDown;
    private javax.swing.JButton jbMoveAll;
    private javax.swing.JButton jbMoveCurrent;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JButton jbRemoveCurrent;
    private javax.swing.JButton jbUp;
    private javax.swing.JList<String> jlAvailable;
    private javax.swing.JList<String> jlInList;
    // End of variables declaration//GEN-END:variables

    private void setMoveButtonsState() {
        jbMoveCurrent.setEnabled(jlAvailable.getSelectedIndex() >= 0);
        jbMoveAll.setEnabled(jlAvailable.getModel().getSize() > 0);
        jbRemoveCurrent.setEnabled(jlInList.getSelectedIndex() >= 0);
        jbRemoveAll.setEnabled(jlInList.getModel().getSize() > 0);
    }

    private void setUpDownButtonsState() {
        ListSelectionModel selectionModel = jlInList.getSelectionModel();
        ListModel listModel = jlInList.getModel();

        jbDown.setEnabled(selectionModel.getMaxSelectionIndex() >= 0 && listModel.getSize() > 1 && selectionModel.getMaxSelectionIndex() < listModel.getSize() - 1);
        jbUp.setEnabled(selectionModel.getMinSelectionIndex() >= 0 && listModel.getSize() > 1 && selectionModel.getMinSelectionIndex() > 0);
    }

    DBField[] getSelected() {
        DefaultListModel<MenuItem> model = (DefaultListModel) jlInList.getModel();
        ArrayList<DBField> ret = new ArrayList<>(model.getSize());
        for (int i = 0; i < model.getSize(); i++) {
            ret.add((DBField) model.get(i).getValue());
        }
        return ret.toArray(new DBField[]{});
    }
}
